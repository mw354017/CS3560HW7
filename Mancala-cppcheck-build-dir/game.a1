<?xml version="1.0"?>
<analyzerinfo checksum="1371098487">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/mattraywagner/Documents/HW6/CS3560HW7/game.cpp" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/home/mattraywagner/Documents/HW6/CS3560HW7/game.cpp" line="123"/>
        </error>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="play" lineNumber="20"/>
    <functiondecl functionName="display_message" lineNumber="43"/>
    <functiondecl functionName="get_user_move" lineNumber="48"/>
    <functiondecl functionName="winning" lineNumber="57"/>
    <functiondecl functionName="eval_with_lookahead" lineNumber="74"/>
    <functiondecl functionName="make_computer_move" lineNumber="120"/>
    <functiondecl functionName="make_human_move" lineNumber="153"/>
    <functioncall functionName="COMPUTER"/>
    <functioncall functionName="HUMAN"/>
    <functioncall functionName="INT_MIN"/>
    <functioncall functionName="NEUTRAL"/>
    <functioncall functionName="SEARCH_LEVELS"/>
    <functioncall functionName="answer"/>
    <functioncall functionName="best_move"/>
    <functioncall functionName="best_value"/>
    <functioncall functionName="cin"/>
    <functioncall functionName="clone"/>
    <functioncall functionName="compute_moves"/>
    <functioncall functionName="const"/>
    <functioncall functionName="display_message"/>
    <functioncall functionName="display_status"/>
    <functioncall functionName="empty"/>
    <functioncall functionName="eval_with_lookahead"/>
    <functioncall functionName="evaluate"/>
    <functioncall functionName="front"/>
    <functioncall functionName="game"/>
    <functioncall functionName="get_user_move"/>
    <functioncall functionName="getline"/>
    <functioncall functionName="if"/>
    <functioncall functionName="is_game_over"/>
    <functioncall functionName="is_legal"/>
    <functioncall functionName="last_mover"/>
    <functioncall functionName="make_computer_move"/>
    <functioncall functionName="make_human_move"/>
    <functioncall functionName="make_move"/>
    <functioncall functionName="move"/>
    <functioncall functionName="moves"/>
    <functioncall functionName="next_mover"/>
    <functioncall functionName="pop"/>
    <functioncall functionName="restart"/>
    <functioncall functionName="return"/>
    <functioncall functionName="value"/>
    <functioncall functionName="while"/>
    <functioncall functionName="winning"/>
  </FileInfo>
</analyzerinfo>
